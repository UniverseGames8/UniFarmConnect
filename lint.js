const fs = require('fs');
const path = require('path');

// –ü—Ä–∞–≤–∏–ª–∞ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
const namingRules = {
  components: /^[A-Z][a-zA-Z]*\.(tsx|jsx)$/,
  pages: /^[A-Z][a-zA-Z]*\.(tsx|jsx)$/,
  hooks: /^use[A-Z][a-zA-Z]*\.(ts|tsx)$/,
  utils: /^[a-z][a-zA-Z]*\.(ts|js)$/,
  types: /^[A-Z][a-zA-Z]*\.(ts|d\.ts)$/,
  constants: /^[A-Z][A-Z_]*\.(ts|js)$/,
  styles: /^[a-z][a-zA-Z]*\.(css|scss|module\.css|module\.scss)$/,
  tests: /^[A-Z][a-zA-Z]*\.(test|spec)\.(ts|tsx|js|jsx)$/
};

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const directories = {
  components: 'client/src/components',
  pages: 'client/src/pages',
  hooks: 'client/src/hooks',
  utils: 'client/src/utils',
  types: 'client/src/types',
  constants: 'client/src/constants',
  styles: 'client/src/styles',
  tests: 'client/src/__tests__'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞
function checkFile(filePath, rule) {
  const fileName = path.basename(filePath);
  if (!rule.test(fileName)) {
    console.error(`‚ùå ${filePath} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞–º –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è`);
    return false;
  }
  return true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –æ–±—Ö–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
function checkDirectory(dir, rule) {
  if (!fs.existsSync(dir)) return true;
  
  const files = fs.readdirSync(dir);
  let isValid = true;

  for (const file of files) {
    const filePath = path.join(dir, file);
    const stat = fs.statSync(filePath);

    if (stat.isDirectory()) {
      isValid = checkDirectory(filePath, rule) && isValid;
    } else {
      isValid = checkFile(filePath, rule) && isValid;
    }
  }

  return isValid;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
function checkNamingConventions() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤...\n');
  
  let hasErrors = false;

  for (const [type, rule] of Object.entries(namingRules)) {
    const dir = directories[type];
    console.log(`\n–ü—Ä–æ–≤–µ—Ä–∫–∞ ${type}...`);
    
    if (!checkDirectory(dir, rule)) {
      hasErrors = true;
    }
  }

  if (hasErrors) {
    console.error('\n‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤');
    process.exit(1);
  } else {
    console.log('\n‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–∞–≤–∏–ª–∞–º –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è');
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkNamingConventions(); 