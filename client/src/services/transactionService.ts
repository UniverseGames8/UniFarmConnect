import { apiRequest } from '@/lib/queryClient';
import { correctApiRequest } from '@/lib/correctApiRequest';

/**
 * –¢–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */
export enum TransactionType {
  DEPOSIT = 'deposit',
  WITHDRAWAL = 'withdrawal',
  BONUS = 'bonus',
  FARMING_DEPOSIT = 'farming_deposit',
  FARMING_REWARD = 'farming_reward',
  FARMING_HARVEST = 'farming_harvest',
  REFERRAL_REWARD = 'referral_reward',
  DAILY_BONUS = 'daily_bonus',
  SIGNUP_BONUS = 'signup_bonus',
  AIRDROP = 'airdrop',
  TON_BOOST = 'ton_boost',
  BOOST = 'boost',
  TON_FARMING_REWARD = 'ton_farming_reward',
  UNKNOWN = 'unknown'
}

/**
 * –°—Ç–∞—Ç—É—Å—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */
export enum TransactionStatus {
  PENDING = 'pending',
  COMPLETED = 'completed',
  FAILED = 'failed'
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
export interface Transaction {
  id: string | number;
  type: string;
  amount: number;
  tokenType: string;
  timestamp: Date;
  status: string;
  source?: string;
  category?: string;
  title?: string;
  description?: string;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param limit –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 * @param offset –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
 * @returns –ü—Ä–æ–º–∏—Å —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */
export async function fetchTransactions(
  userId: number,
  limit: number = 10,
  offset: number = 0
): Promise<Transaction[]> {
  try {
    console.log('[transactionService] –ó–∞–ø—Ä–æ—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è userId:', userId);
    
    if (!userId) {
      console.error('[transactionService] –û—à–∏–±–∫–∞: userId –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
      throw new Error('userId is required to fetch transactions');
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ correctApiRequest —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    console.log('[transactionService] –ó–∞–ø—Ä–æ—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ correctApiRequest');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–∞–∫ —Å—Ç–∞—Ä–æ–≥–æ, —Ç–∞–∫ –∏ –Ω–æ–≤–æ–≥–æ –ø—É—Ç–∏ API
    const response = await correctApiRequest(`/api/transactions?user_id=${userId}&limit=${limit}&offset=${offset}`, 'GET', null, {
      additionalLogging: true,
      errorHandling: {
        report404: true,
        detailed: true,
        traceId: `transactions-${Date.now()}`
      }
    });
    
    // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏: –≤—ã–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
    console.log('[transactionService] –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API:', JSON.stringify(response));
    
    // correctApiRequest —Å–∞–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –æ—à–∏–±–∫–∏ –∑–∞–ø—Ä–æ—Å–∞,
    // –Ω–æ –º—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    if (!response.success || !response.data) {
      console.error('[transactionService] –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –æ—Ç–≤–µ—Ç–∞:', response);
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    }
    
    console.log('[transactionService] –ü–æ–ª—É—á–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', response.data);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
    if (!response.data || !response.data.transactions) {
      console.warn('[transactionService] –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π:', response.data);
      return [];
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    return response.data.transactions.map((tx: any) => formatTransaction(tx));
  } catch (error) {
    console.error('[transactionService] –û—à–∏–±–∫–∞ –≤ fetchTransactions:', error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –ª–∏–º–∏—Ç–æ–º)
 * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param limit –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (—É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è TON)
 * @param offset –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
 * @returns –ü—Ä–æ–º–∏—Å —Å–æ —Å–ø–∏—Å–∫–æ–º TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */
export async function fetchTonTransactions(
  userId: number,
  limit: number = 50,  // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  offset: number = 0
): Promise<Transaction[]> {
  try {
    console.log('[transactionService] –ó–∞–ø—Ä–æ—Å TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è userId:', userId);
    
    if (!userId) {
      console.error('[transactionService] –û—à–∏–±–∫–∞: userId –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
      throw new Error('userId is required to fetch TON transactions');
    }
    
    // –î–µ–ª–∞–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const response = await correctApiRequest(`/api/transactions?user_id=${userId}&limit=${limit}&offset=${offset}`, 'GET', null, {
      additionalLogging: true,
      errorHandling: {
        report404: true,
        detailed: true,
        traceId: `ton-transactions-${Date.now()}`
      }
    });
    
    console.log('[transactionService] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç API –¥–ª—è TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', JSON.stringify(response));
    
    if (!response.success || !response.data || !response.data.transactions) {
      console.error('[transactionService] –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', response);
      return [];
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const allTypes = response.data.transactions.map((tx: any) => 
      `${tx.type}:${tx.currency || tx.token_type || 'unknown'}`
    );
    console.log('[transactionService] –í—Å–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', allTypes);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —É—á–∏—Ç—ã–≤–∞—è —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–æ–ª–µ–π
    const tonTransactions = response.data.transactions.filter((tx: any) => {
      const currency = (tx.currency || tx.token_type || '').toUpperCase();
      const type = (tx.type || '').toLowerCase();
      const source = (tx.source || '').toLowerCase();
      const category = (tx.category || '').toLowerCase();
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö TON-—Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      if (currency === 'TON' || type.includes('ton') || source.includes('ton') || 
          type === 'boost_purchase' || (category === 'boost' && currency === 'TON')) {
        console.log('[transactionService] –î–µ—Ç–∞–ª–∏ TON-—Å–≤—è–∑–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', {
          id: tx.id,
          type,
          currency,
          source,
          category,
          amount: tx.amount,
          created_at: tx.created_at
        });
      }
      
      // –ò—â–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—Ç TON Boost
      if (source.includes('ton boost') || source.match(/ton\s+boost/i)) {
        console.log('[transactionService] üåü –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç TON Boost:', {
          id: tx.id,
          type,
          currency, 
          source,
          amount: tx.amount,
          created_at: tx.created_at
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º TON-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:
      // 1. –í–∞–ª—é—Ç–∞ TON
      // 2. –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–≤—è–∑–∞–Ω —Å TON (boost_purchase, ton_boost, ton_farming_reward)
      // 3. –ò—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç TON
      // 4. –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–≤—è–∑–∞–Ω–∞ —Å farming –∏–ª–∏ boost
      // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è TON Boost —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è TON Boost
      // –ú–Ω–æ–≥–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—Ç TON Boost –º–æ–≥—É—Ç –±—ã—Ç—å –≤ UNI –∏ TON
      const isTonBoostReward = 
        (source.includes('ton boost') || source.includes('ton farming')) ||
        (type === 'boost_bonus' && (
          source.toLowerCase().includes('ton') || 
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª—é–±—ã–µ –±–æ–Ω—É—Å—ã –æ—Ç TON Boost –≤–∫–ª—é—á–∞—è UNI-–Ω–∞–≥—Ä–∞–¥—ã
          (tx.description && tx.description.toLowerCase().includes('ton'))
        )) ||
        (type === 'ton_farming_reward') ||
        // –ò—â–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è UNI, –∫–æ—Ç–æ—Ä—ã–µ —Å–≤—è–∑–∞–Ω—ã —Å TON Boost
        (currency === 'UNI' && source.toLowerCase().includes('ton'));
        
      if (isTonBoostReward) {
        console.log('[transactionService] üí∞ –ù–∞–π–¥–µ–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç TON Boost/Farming:', {
          id: tx.id,
          type,
          currency,
          source,
          amount: tx.amount,
          created_at: tx.created_at
        });
      }
        
      return currency === 'TON' || 
             type.includes('ton') ||
             type === 'boost_purchase' ||  // –ü–æ–∫—É–ø–∫–∞ TON Boost –ø–∞–∫–µ—Ç–æ–≤
             type === 'ton_boost' ||       // TON Boost –æ–ø–µ—Ä–∞—Ü–∏–∏
             source.includes('ton') ||
             type === 'ton_farming_reward' || // TON Farming –Ω–∞–≥—Ä–∞–¥—ã
             (category === 'boost' && currency === 'TON') ||
             isTonBoostReward;  // –ù–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—Ç TON Boost
    });
    
    console.log('[transactionService] –ù–∞–π–¥–µ–Ω–æ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', tonTransactions.length);
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (tonTransactions.length > 0) {
      console.log('[transactionService] –ü—Ä–∏–º–µ—Ä—ã TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', 
        tonTransactions.slice(0, 3).map((tx: any) => ({
          id: tx.id,
          type: tx.type,
          currency: tx.currency || tx.token_type,
          amount: tx.amount,
          created_at: tx.created_at
        }))
      );
    } else {
      console.warn('[transactionService] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    return tonTransactions.map((tx: any) => formatTransaction(tx));
  } catch (error) {
    console.error('[transactionService] –û—à–∏–±–∫–∞ –≤ fetchTonTransactions:', error);
    return []; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –≤—ã–±—Ä–æ—Å–∞ –æ—à–∏–±–∫–∏ –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
 * @param rawTransaction –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
 * @returns –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
 */
function formatTransaction(rawTransaction: any): Transaction {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π –≤ —Å—ã—Ä–æ–º –æ–±—ä–µ–∫—Ç–µ
  if (!rawTransaction || typeof rawTransaction !== 'object') {
    console.warn('[transactionService] –ü–æ–ø—ã—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', rawTransaction);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    return {
      id: 0,
      type: TransactionType.UNKNOWN,
      title: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è',
      amount: 0,
      tokenType: 'UNI',
      timestamp: new Date(),
      status: TransactionStatus.PENDING,
      source: '',
      category: 'other',
      description: '–î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'
    };
  }
  
  // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –ø–æ–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log('[transactionService] –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', JSON.stringify({
    id: rawTransaction.id,
    type: rawTransaction.type,
    currency: rawTransaction.currency,
    token_type: rawTransaction.token_type,
    amount: rawTransaction.amount,
    created_at: rawTransaction.created_at
  }));
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞ –∏–∑ currency –∏–ª–∏ token_type
  let tokenType = 'UNI';
  if (rawTransaction.currency) {
    tokenType = rawTransaction.currency.toUpperCase();
  } else if (rawTransaction.token_type) {
    tokenType = rawTransaction.token_type.toUpperCase();
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  if (tokenType === 'TON') {
    console.log('[transactionService] üîµ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:', {
      id: rawTransaction.id,
      type: rawTransaction.type,
      currency: tokenType,
      amount: rawTransaction.amount,
      created_at: rawTransaction.created_at
    });
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const type = formatTransactionType(rawTransaction.type || 'unknown');
  const title = getTransactionTitle(type);
  const category = getTransactionCategory(type) || rawTransaction.category || 'other';
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º timestamp –∏–∑ created_at –∏–ª–∏ timestamp
  let timestamp = new Date();
  if (rawTransaction.created_at) {
    timestamp = new Date(rawTransaction.created_at);
  } else if (rawTransaction.timestamp) {
    timestamp = new Date(rawTransaction.timestamp);
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏  
  const status = formatTransactionStatus(rawTransaction.status || 'pending');
  
  // –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç Transaction
  const formattedTransaction: Transaction = {
    id: rawTransaction.id || 0,
    type: type,
    title: rawTransaction.title || title,
    amount: typeof rawTransaction.amount === 'string' ? parseFloat(rawTransaction.amount) : (rawTransaction.amount || 0),
    tokenType: tokenType,
    timestamp: timestamp,
    status: status,
    source: rawTransaction.source || '',
    category: category,
    description: rawTransaction.description || ''
  };
  
  return formattedTransaction;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
 * @param type –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ API
 * @returns –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
function formatTransactionType(type: string): string {
  const typeMap: { [key: string]: string } = {
    'deposit': TransactionType.DEPOSIT,
    'withdrawal': TransactionType.WITHDRAWAL,
    'bonus': TransactionType.BONUS,
    'farming_deposit': TransactionType.FARMING_DEPOSIT,
    'farming_reward': TransactionType.FARMING_REWARD,
    'farming_harvest': TransactionType.FARMING_HARVEST,
    'referral_reward': TransactionType.REFERRAL_REWARD,
    'daily_bonus': TransactionType.DAILY_BONUS,
    'signup_bonus': TransactionType.SIGNUP_BONUS,
    'airdrop': TransactionType.AIRDROP,
    'ton_boost': TransactionType.TON_BOOST,
    'boost': TransactionType.BOOST,
    'boost_purchase': TransactionType.TON_BOOST, // –ù–æ–≤—ã–π —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è boost_purchase
    'ton_farming_reward': TransactionType.TON_FARMING_REWARD
  };
  
  return typeMap[type.toLowerCase()] || TransactionType.UNKNOWN;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
 * @param status –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ API
 * @returns –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
function formatTransactionStatus(status: string): string {
  const statusMap: { [key: string]: string } = {
    'pending': TransactionStatus.PENDING,
    'completed': TransactionStatus.COMPLETED,
    'failed': TransactionStatus.FAILED
  };
  
  return statusMap[status.toLowerCase()] || TransactionStatus.PENDING;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞
 * @param type –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 * @returns –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
function getTransactionCategory(type: string): string {
  const categoryMap: { [key: string]: string } = {
    [TransactionType.DEPOSIT]: 'deposit',
    [TransactionType.WITHDRAWAL]: 'withdrawal',
    [TransactionType.FARMING_DEPOSIT]: 'farming',
    [TransactionType.FARMING_REWARD]: 'farming',
    [TransactionType.FARMING_HARVEST]: 'farming',
    [TransactionType.BONUS]: 'bonus',
    [TransactionType.REFERRAL_REWARD]: 'referral',
    [TransactionType.DAILY_BONUS]: 'bonus',
    [TransactionType.SIGNUP_BONUS]: 'bonus',
    [TransactionType.AIRDROP]: 'airdrop',
    [TransactionType.TON_BOOST]: 'boost',
    [TransactionType.BOOST]: 'boost',
    [TransactionType.TON_FARMING_REWARD]: 'farming'
  };
  
  return categoryMap[type] || 'other';
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞
 * @param type –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 * @returns –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
function getTransactionTitle(type: string): string {
  const titleMap: { [key: string]: string } = {
    [TransactionType.DEPOSIT]: '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ',
    [TransactionType.WITHDRAWAL]: '–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤',
    [TransactionType.FARMING_DEPOSIT]: '–î–µ–ø–æ–∑–∏—Ç –≤ —Ñ–∞—Ä–º–∏–Ω–≥',
    [TransactionType.FARMING_REWARD]: '–î–æ—Ö–æ–¥ —Ñ–∞—Ä–º–∏–Ω–≥–∞',
    [TransactionType.FARMING_HARVEST]: '–°–±–æ—Ä —Ñ–∞—Ä–º–∏–Ω–≥–∞',
    [TransactionType.BONUS]: '–ë–æ–Ω—É—Å',
    [TransactionType.REFERRAL_REWARD]: '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ',
    [TransactionType.DAILY_BONUS]: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å',
    [TransactionType.SIGNUP_BONUS]: '–ë–æ–Ω—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
    [TransactionType.AIRDROP]: 'Airdrop',
    [TransactionType.TON_BOOST]: '–ü–æ–∫—É–ø–∫–∞ TON Boost',
    [TransactionType.BOOST]: 'Boost –ø–∞–∫–µ—Ç',
    [TransactionType.TON_FARMING_REWARD]: '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ TON —Ñ–∞—Ä–º–∏–Ω–≥–∞',
    'boost_purchase': '–ü–æ–∫—É–ø–∫–∞ TON Boost'
  };
  
  return titleMap[type] || '–î—Ä—É–≥–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è';
}