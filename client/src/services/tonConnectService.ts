import { 
  TonConnectUI, 
  TonConnect, 
  isWalletInfoInjected, 
  UserRejectsError, 
  WalletNotConnectedError,
  THEME
} from '@tonconnect/ui-react';
import { CHAIN } from '@tonconnect/protocol';
// –£–¥–∞–ª–µ–Ω–æ –∏–º–ø–æ—Ä—Ç –∏–∑ @ton/core –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å Buffer –≤ –±—Ä–∞—É–∑–µ—Ä–µ

// –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π TonConnect
const DEBUG_ENABLED = false; // –û—Ç–∫–ª—é—á–∞–µ–º debug –ª–æ–≥–∏ –≤ production
function debugLog(...args: any[]) {
  if (DEBUG_ENABLED) {
    console.log('[TON_CONNECT_DEBUG]', ...args);
  }
}

// –¢–∏–ø —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
type ConnectionListener = (connected: boolean) => void;
// –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π
const connectionListeners: ConnectionListener[] = [];

// –ê–¥—Ä–µ—Å TON –∫–æ—à–µ–ª—å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
export const TON_PROJECT_ADDRESS = 'UQBlrUfJMIlAcyYzttyxV2xrrvaHHIKEKeetGZbDoitTRWT8';

// –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (30 –º–∏–Ω—É—Ç)
const TX_LIFETIME = 30 * 60;

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç Uint8Array –≤ base64 —Å—Ç—Ä–æ–∫—É (–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Buffer)
 */
function uint8ArrayToBase64(bytes: Uint8Array): string {
  const binaryString = Array.from(bytes)
    .map(byte => String.fromCharCode(byte))
    .join('');
  return btoa(binaryString);
}

/**
 * –°–æ–∑–¥–∞—ë—Ç BOC-payload —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
 * @param comment –¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
 * @returns base64-—Å—Ç—Ä–æ–∫–∞ –¥–ª—è payload
 */
function createBocWithComment(comment: string): string {
  try {
    // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ Buffer, —Ç–∞–∫ –∫–∞–∫ –º—ã –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    
    // –í–ù–ò–ú–ê–ù–ò–ï: –í–º–µ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è @ton/core beginCell, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π base64
    
    // –ü—Ä—è–º–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ base64
    const bocBytes = new TextEncoder().encode(comment);
    
    // –ü—Ä–∏—Ç–≤–æ—Ä—è–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ BOC –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
    
    // –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –ü–û–î–•–û–î: –ï—Å–ª–∏ —Å BOC –≤–æ–∑–Ω–∏–∫–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—ã, –ø—Ä–æ—Å—Ç–æ –∫–æ–¥–∏—Ä—É–µ–º —Å–∞–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    // –≠—Ç–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É TON, –Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–æ–π–¥–µ—Ç
    if (!bocBytes || bocBytes.length === 0) {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ base64 –Ω–∞–ø—Ä—è–º—É—é
      return btoa(comment);
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ base64
    const base64Result = uint8ArrayToBase64(bocBytes);
    
    return base64Result;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ BOC:', error);
    
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å Buffer, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
    
    // –ü—Ä–æ—Å—Ç–æ –∑–∞–∫–æ–¥–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ base64 - —ç—Ç–æ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ BOC,
    // –Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
    try {
      return btoa(comment);
    } catch (e) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–∞–∂–µ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ base64:', e);
      return '';
    }
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç TON –∫–æ—à–µ–ª–µ–∫
 * @param tonConnectUI –≠–∫–∑–µ–º–ø–ª—è—Ä TonConnectUI –∏–∑ useTonConnectUI —Ö—É–∫–∞
 */
export function isTonWalletConnected(tonConnectUI: TonConnectUI): boolean {
  if (!tonConnectUI) {
    console.error('TonConnectUI is not provided to isTonWalletConnected');
    return false;
  }
  return tonConnectUI.connected;
}

/**
 * –ü–æ–¥–∫–ª—é—á–∞–µ—Ç TON –∫–æ—à–µ–ª–µ–∫, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
 * @param tonConnectUI –≠–∫–∑–µ–º–ø–ª—è—Ä TonConnectUI –∏–∑ useTonConnectUI —Ö—É–∫–∞
 */
export async function connectTonWallet(tonConnectUI: TonConnectUI): Promise<boolean> {
  try {
    debugLog('connectTonWallet called with', { tonConnectUI: !!tonConnectUI });
    
    if (!tonConnectUI) {
      console.error('Error: tonConnectUI is undefined in connectTonWallet');
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –º–µ—Ç–æ–¥ connectWallet
    if (typeof tonConnectUI.connectWallet !== 'function') {
      console.error('Error: tonConnectUI.connectWallet is not a function');
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    debugLog('Current connection state:', { connected: tonConnectUI.connected });
    
    if (!tonConnectUI.connected) {
      debugLog('Attempting to connect wallet...');
      // –í—ã–∑—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–æ—à–µ–ª—å–∫–æ–º
      await tonConnectUI.connectWallet();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      debugLog('Connection result:', { connected: tonConnectUI.connected, wallet: tonConnectUI.wallet });
      
      return tonConnectUI.connected;
    }
    
    debugLog('Wallet already connected');
    return true;
  } catch (error) {
    console.error('Error connecting TON wallet:', error);
    return false;
  }
}

/**
 * –û—Ç–∫–ª—é—á–∞–µ—Ç TON –∫–æ—à–µ–ª–µ–∫
 * @param tonConnectUI –≠–∫–∑–µ–º–ø–ª—è—Ä TonConnectUI –∏–∑ useTonConnectUI —Ö—É–∫–∞
 */
export async function disconnectTonWallet(tonConnectUI: TonConnectUI): Promise<void> {
  if (tonConnectUI && tonConnectUI.connected) {
    await tonConnectUI.disconnect();
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∞–¥—Ä–µ—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ TON –∫–æ—à–µ–ª—å–∫–∞
 * @param tonConnectUI –≠–∫–∑–µ–º–ø–ª—è—Ä TonConnectUI –∏–∑ useTonConnectUI —Ö—É–∫–∞
 */
export function getTonWalletAddress(tonConnectUI: TonConnectUI): string | null {
  if (tonConnectUI && tonConnectUI.connected && tonConnectUI.account) {
    return tonConnectUI.account.address;
  }
  
  return null;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
 * @param tonConnectUI –≠–∫–∑–µ–º–ø–ª—è—Ä TonConnectUI –∏–∑ useTonConnectUI —Ö—É–∫–∞
 * @param amount –°—É–º–º–∞ TON (–≤ –±–∞–∑–æ–≤—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö, 1 TON = 10^9 nanoTON)
 * @param comment –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–ª–∏ null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
 */
export async function sendTonTransaction(
  tonConnectUI: TonConnectUI,
  amount: string,
  comment: string
): Promise<{txHash: string; status: 'success' | 'error'} | null> {
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º userId –∏ boostId –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–ø—Ä–∏–º–µ–º —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ UniFarmBoost:userId:boostId)
    const parts = comment.split(':');
    const userId = parts.length > 1 ? parts[1] : '1';
    const boostId = parts.length > 2 ? parts[2] : '1';
    
    // –ü–û –¢–ó: –î–æ–±–∞–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∑–∞–º–µ—Ç–Ω—ã–π –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log("===============================================================");
    console.log("üî¥ –í–´–ó–û–í sendTonTransaction –ü–û –ù–û–í–û–ú–£ –¢–ó");
    console.log("üî¥ –°–£–ú–ú–ê:", amount, "TON");
    console.log("üî¥ –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô:", comment);
    console.log("üî¥ tonConnectUI:", tonConnectUI ? "–ü–†–ò–°–£–¢–°–¢–í–£–ï–¢" : "–û–¢–°–£–¢–°–¢–í–£–ï–¢");
    console.log("üî¥ –ü–û–î–ö–õ–Æ–ß–ï–ù:", tonConnectUI?.connected ? "–î–ê" : "–ù–ï–¢");
    console.log("üî¥ –ê–î–†–ï–° –ö–û–®–ï–õ–¨–ö–ê:", tonConnectUI?.account?.address || "–ù–ï–¢ –ê–î–†–ï–°–ê");
    console.log("üî¥ –§–£–ù–ö–¶–ò–Ø sendTransaction:", typeof tonConnectUI?.sendTransaction === 'function' ? "–î–û–°–¢–£–ü–ù–ê" : "–ù–ï–î–û–°–¢–£–ü–ù–ê");
    console.log("===============================================================");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–ª–∏—á–∏–µ tonConnectUI –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if (!tonConnectUI) {
      console.error('[ERROR] tonConnectUI is null or undefined');
      throw new Error('TonConnectUI is not initialized');
    }
    
    // –ü–æ –¢–ó: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if (!tonConnectUI.connected) {
      console.log('[INFO] –ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å...');
      await connectTonWallet(tonConnectUI);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–Ω–æ–≤–∞
      if (!tonConnectUI.connected) {
        console.error('[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫');
        throw new WalletNotConnectedError();
      }
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—É–º–º—É –∏–∑ TON –≤ –Ω–∞–Ω–æTON (1 TON = 10^9 –Ω–∞–Ω–æTON)
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ amount —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π —Å –¥–µ—Å—è—Ç–∏—á–Ω—ã–º —á–∏—Å–ª–æ–º
    const tonAmount = parseFloat(amount);
    if (isNaN(tonAmount)) {
      console.error('[ERROR] –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—É–º–º–∞ TON:', amount);
      throw new Error('–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—É–º–º–∞ TON');
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º TON –≤ –Ω–∞–Ω–æTON, –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ü–µ–ª–æ–≥–æ
    const nanoTonAmount = Math.round(tonAmount * 1000000000).toString();
    console.log(`[TON] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—É–º–º—ã: ${amount} TON = ${nanoTonAmount} nanoTON`);
    
    // –ü–æ –¢–ó: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º rawPayload –≤ —Ñ–æ—Ä–º–∞—Ç–µ UniFarmBoost:userId:boostId
    const rawPayload = `UniFarmBoost:${userId}:${boostId}`;
    
    // –°–æ–∑–¥–∞–µ–º BOC-payload —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
    const payload = createBocWithComment(rawPayload);
    
    // –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ - –≤ –∫–æ–Ω—Å–æ–ª–∏ –≤—ã–≤–æ–¥–∏–º –¥–ª–∏–Ω—É payload
    console.log(`‚úÖ BOC-payload –¥–ª–∏–Ω–∞: ${payload.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    
    console.log("‚úÖ –°–æ–∑–¥–∞–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π BOC-payload –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¢–ó");
    
    console.log("‚úÖ –°–æ–∑–¥–∞–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π BOC-payload —Å –º–∞—Ä–∫–µ—Ä–æ–º 0 –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º");
    
    // –ü–æ –¢–ó: –¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ payload
    console.log("üì¶ rawPayload:", rawPayload);
    console.log("üì¶ BOC payload (base64):", payload);
    
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¢–ó
    const transaction = {
      validUntil: Math.floor(Date.now() / 1000) + 600, // 10 –º–∏–Ω—É—Ç –ø–æ –¢–ó
      messages: [
        {
          address: TON_PROJECT_ADDRESS, // UQBlrUfJMIlAcyYzttyxV2xrrvaHHIKEKeetGZbDoitTRWT8
          amount: nanoTonAmount, // –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–∞—è –∏–∑ TON —Å—É–º–º–∞ –≤ –Ω–∞–Ω–æTON
          payload: payload // Base64 –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        }
      ]
    };
    
    // –ü–æ –¢–ó: –¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    console.log("[DEBUG] Sending transaction", transaction);
    
    try {
      // –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–ø–æ –¢–ó)
      if (!tonConnectUI.connected) {
        console.log('[INFO] –ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–¥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å...');
        await connectTonWallet(tonConnectUI);
        
        if (!tonConnectUI.connected) {
          console.error('[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
          throw new WalletNotConnectedError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª—ë–∫ –ø–µ—Ä–µ–¥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π');
        }
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ (–ø–æ –¢–ó)
      console.log("[TON] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ TonConnect...");
      
      const result = await tonConnectUI.sendTransaction(transaction);
      debugLog('*** –†–ï–ó–£–õ–¨–¢–ê–¢ sendTransaction ***', result);
      
      // –ü–æ –¢–ó: –¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      console.log("‚úÖ Transaction result:", result);
      
      // –í—ã–∑–æ–≤ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ Tonkeeper
      debugLog('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', {
        boc: result.boc ? `–µ—Å—Ç—å (${result.boc.length} —Å–∏–º–≤–æ–ª–æ–≤)` : '–Ω–µ—Ç',
        has_result: !!result
      });
      
      return {
        txHash: result.boc,
        status: 'success'
      };
    } catch (error) {
      const txError = error as Error; // –¢–∏–ø–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∫–∞–∫ Error –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–≤–æ–π—Å—Ç–≤–∞–º
      
      debugLog('–û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–∑–æ–≤–µ sendTransaction:', { 
        errorType: typeof error,
        errorName: txError.name,
        errorMessage: txError.message,
        errorStack: txError.stack?.substring(0, 100) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ —Å—Ç–µ–∫–∞
      });
      
      // –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      if (error instanceof UserRejectsError) {
        debugLog('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –∫–æ—à–µ–ª—å–∫–µ');
      }
      else if (error instanceof WalletNotConnectedError) {
        debugLog('–û—à–∏–±–∫–∞: –∫–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
      }
      else {
        debugLog('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', {
          errorToString: String(error),
          errorJSON: JSON.stringify(error)
        });
      }
      
      throw error;  // Re-throw to be caught by the outer try-catch
    }
  } catch (error) {
    console.error('Error sending TON transaction:', error);
    
    if (error instanceof UserRejectsError) {
      return {
        txHash: '',
        status: 'error'
      };
    }
    
    return null;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—Å–µ –ª–∏ –≥–æ—Ç–æ–≤–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 * @param tonConnectUI –≠–∫–∑–µ–º–ø–ª—è—Ä TonConnectUI –∏–∑ useTonConnectUI —Ö—É–∫–∞
 * @returns true –µ—Å–ª–∏ TonConnect –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
 */
export function isTonPaymentReady(tonConnectUI: TonConnectUI): boolean {
  // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  const hasConnectUI = !!tonConnectUI;
  const hasSendTransaction = hasConnectUI && typeof tonConnectUI.sendTransaction === 'function';
  const isConnected = hasConnectUI && !!tonConnectUI.connected;
  const hasWallet = hasConnectUI && !!tonConnectUI.wallet;
  const hasAccount = hasConnectUI && !!tonConnectUI.account;
  const hasAddress = hasAccount && !!tonConnectUI.account?.address;
  
  // –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–≤–æ–π—Å—Ç–≤
  debugLog('isTonPaymentReady —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', {
    hasConnectUI,
    hasSendTransaction,
    isConnected,
    hasWallet,
    hasAccount,
    hasAddress,
    wallet: hasWallet ? {
      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–µ–ª—å–∫–µ
      deviceAppName: tonConnectUI.wallet?.device?.appName,
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–∏–ø–æ–≤ Wallet
      walletInfo: {
        hasWalletObject: !!tonConnectUI.wallet,
        type: typeof tonConnectUI.wallet,
        appName: tonConnectUI.wallet?.device?.appName || 'unknown', 
      }
    } : null,
    account: hasAccount ? {
      chain: tonConnectUI.account?.chain,
      hasAddress: !!tonConnectUI.account?.address,
      address: tonConnectUI.account?.address 
        ? (tonConnectUI.account.address.slice(0, 10) + '...' + tonConnectUI.account.address.slice(-10))
        : 'no-address',
    } : null
  });
  
  // –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Ç—Ä–µ–±—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –∏ –∞–∫–∫–∞—É–Ω—Ç–∞
  const isReady = hasConnectUI && hasSendTransaction && isConnected && hasWallet && hasAccount && hasAddress;
  
  // –ï—Å–ª–∏ –Ω–µ –≥–æ—Ç–æ–≤, –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—É
  if (!isReady) {
    const reasons = [];
    if (!hasConnectUI) reasons.push('tonConnectUI –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    if (!hasSendTransaction) reasons.push('sendTransaction –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π');
    if (!isConnected) reasons.push('–∫–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω (tonConnectUI.connected = false)');
    if (!hasWallet) reasons.push('–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (tonConnectUI.wallet = null)');
    if (!hasAccount) reasons.push('–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (tonConnectUI.account = null)');
    if (!hasAddress) reasons.push('–∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (tonConnectUI.account.address = null)');
    
    debugLog('isTonPaymentReady –≤–µ—Ä–Ω—É–ª FALSE. –ü—Ä–∏—á–∏–Ω—ã:', reasons);
    console.log('[DEBUG] isTonPaymentReady –≤–µ—Ä–Ω—É–ª FALSE. –ü—Ä–∏—á–∏–Ω—ã:', reasons.join(', '));
  } else {
    debugLog('isTonPaymentReady –≤–µ—Ä–Ω—É–ª TRUE. –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã.');
    console.log('[DEBUG] isTonPaymentReady –≤–µ—Ä–Ω—É–ª TRUE. –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã.');
  }
  
  // –ü–æ –¢–ó –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
  // –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –≤—ã–∑–æ–≤–æ–º sendTransaction
  console.log('[DEBUG] ‚ö†Ô∏è –ü–†–û–í–ï–†–ö–ê isTonPaymentReady –û–¢–ö–õ–Æ–ß–ï–ù–ê –ü–û –¢–ó, –í–û–ó–í–†–ê–©–ê–ï–ú TRUE –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò');
  return true; // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è sendTransaction
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ UniFarmBoost:userId:boostId
 */
export function createTonTransactionComment(userId: number, boostId: number): string {
  return `UniFarmBoost:${userId}:${boostId}`;
}

/**
 * –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
 */
export const isWalletConnected = isTonWalletConnected;
export const getWalletAddress = getTonWalletAddress;
export const connectWallet = connectTonWallet;
export const disconnectWallet = disconnectTonWallet;

/**
 * –î–æ–±–∞–≤–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 * @param tonConnectUI –≠–∫–∑–µ–º–ø–ª—è—Ä TonConnectUI –∏–∑ useTonConnectUI —Ö—É–∫–∞
 * @param listener –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 */
export function addConnectionListener(tonConnectUI: TonConnectUI, listener: ConnectionListener): void {
  if (!listener) {
    console.error('Listener function is required for addConnectionListener');
    return;
  }
  
  connectionListeners.push(listener);
  
  // –°—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º
  if (tonConnectUI) {
    const connected = isWalletConnected(tonConnectUI);
    listener(connected);
  }
}

/**
 * –£–¥–∞–ª–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 * @param listener –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ addConnectionListener
 */
export function removeConnectionListener(listener: ConnectionListener): void {
  if (!listener) {
    console.error('Listener function is required for removeConnectionListener');
    return;
  }
  
  const index = connectionListeners.indexOf(listener);
  if (index !== -1) {
    connectionListeners.splice(index, 1);
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TON Connect –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * 
 * –í–ê–ñ–ù–û: 
 * –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞, –ø–æ—Å–∫–æ–ª—å–∫—É –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è TonConnectUIProvider –∏–∑ @tonconnect/ui-react
 * TonConnectUIProvider —Å–∞–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç TON Connect 
 */
export function initTonConnect(): void {
  // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  console.log('TON Connect initialized by TonConnectUIProvider in App.tsx');
}

/**
 * –≠—Ç–æ—Ç —ç–∫—Å–ø–æ—Ä—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏,
 * –Ω–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ–Ω –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –ø—Ä—è–º—ã–º –∏–º–ø–æ—Ä—Ç–æ–º –∏–∑ useTonConnectUI
 */
export const getTonConnectUI = () => {
  console.warn('getTonConnectUI is deprecated, use useTonConnectUI hook instead');
  return null as unknown as TonConnectUI;
}