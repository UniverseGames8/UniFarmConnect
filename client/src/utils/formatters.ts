/**
 * –£—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è UniFarm –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —á–∞—Å—Ç–∏
 */

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ —Ç–æ–∫–µ–Ω–∞
 */
export function formatAmount(amount: number | string, tokenType: string = 'UNI'): string {
  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;
  
  if (isNaN(numAmount)) return '0';
  
  if (tokenType === 'TON') {
    return numAmount.toLocaleString('en-US', {
      minimumFractionDigits: 2,
      maximumFractionDigits: 5
    });
  }
  
  return numAmount.toLocaleString('en-US', {
    minimumFractionDigits: 0,
    maximumFractionDigits: 2
  });
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ –ø–æ–Ω—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
 */
export function formatDate(date: Date | string): string {
  const dateObj = typeof date === 'string' ? new Date(date) : date;
  
  return dateObj.toLocaleDateString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  });
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
 */
export function formatDateTime(date: Date | string): string {
  const dateObj = typeof date === 'string' ? new Date(date) : date;
  
  return dateObj.toLocaleString('ru-RU', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç
 */
export function formatPercent(value: number): string {
  return `${value.toFixed(2)}%`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
 */
export function formatReferralLevel(level: number): string {
  return `–£—Ä–æ–≤–µ–Ω—å ${level}`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
 */
export function formatReferralReward(level: number): string {
  if (level === 1) return '100%';
  if (level === 2) return '2%';
  return `${level}%`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –∑–Ω–∞–∫–æ–º
 */
export function formatTransactionAmount(amount: number, type: 'deposit' | 'withdrawal' | 'reward'): string {
  const sign = type === 'withdrawal' ? '-' : '+';
  return `${sign}${formatAmount(amount)}`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å
 */
export function formatStatus(status: string): string {
  const statusMap: Record<string, string> = {
    active: '–ê–∫—Ç–∏–≤–µ–Ω',
    inactive: '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω',
    pending: '–í –æ–∂–∏–¥–∞–Ω–∏–∏',
    completed: '–ó–∞–≤–µ—Ä—à–µ–Ω',
    failed: '–û—à–∏–±–∫–∞'
  };
  
  return statusMap[status] || status;
}

/**
 * –°–æ–∫—Ä–∞—â–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
 */
export function truncateAddress(address: string, startChars: number = 6, endChars: number = 4): string {
  if (address.length <= startChars + endChars) {
    return address;
  }
  
  return `${address.slice(0, startChars)}...${address.slice(-endChars)}`;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞ —Å —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è–º–∏
 */
export function formatLargeNumber(num: number): string {
  if (num >= 1000000) {
    return (num / 1000000).toFixed(1) + 'M';
  }
  if (num >= 1000) {
    return (num / 1000).toFixed(1) + 'K';
  }
  return num.toString();
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç UNI —á–∏—Å–ª–∞
 */
export function formatUniNumber(amount: number | string, decimals: number = 2): string {
  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;
  
  if (isNaN(numAmount)) return '0';
  
  return numAmount.toLocaleString('en-US', {
    minimumFractionDigits: 0,
    maximumFractionDigits: decimals
  });
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç TON —á–∏—Å–ª–∞
 */
export function formatTonNumber(amount: number | string, decimals: number = 5): string {
  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;
  
  if (isNaN(numAmount)) return '0';
  
  return numAmount.toLocaleString('en-US', {
    minimumFractionDigits: 2,
    maximumFractionDigits: decimals
  });
}

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã
 */
export function safeFormatAmount(amount: number | string, decimals: number = 2, currency: string = ''): string {
  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;
  
  if (isNaN(numAmount)) return '0';
  
  const formatted = numAmount.toLocaleString('en-US', {
    minimumFractionDigits: 0,
    maximumFractionDigits: decimals
  });
  
  return currency ? `${formatted} ${currency}` : formatted;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç USD —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç
 */
export function getUSDEquivalent(amount: number, currency: string): number {
  // –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∫—É—Ä—Å—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω—ã –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è —Å API)
  const rates: Record<string, number> = {
    'UNI': 0.1,
    'TON': 2.5
  };
  
  return amount * (rates[currency] || 0);
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
 */
export function getOptimalDecimals(amount: number | string, currency: string): number {
  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;
  
  if (currency === 'TON') {
    return numAmount > 1 ? 3 : 6;
  }
  
  return numAmount > 1000 ? 0 : 2;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç–æ–≤–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
export function getTransactionColorClass(type: string): string {
  const colorMap: Record<string, string> = {
    deposit: 'text-green-400',
    withdrawal: 'text-red-400',
    reward: 'text-blue-400',
    referral: 'text-purple-400'
  };
  
  return colorMap[type] || 'text-gray-400';
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
export function getTransactionIcon(type: string): string {
  const iconMap: Record<string, string> = {
    deposit: '‚ÜóÔ∏è',
    withdrawal: '‚ÜôÔ∏è',
    reward: 'üéÅ',
    referral: 'üë•'
  };
  
  return iconMap[type] || 'üí∞';
}