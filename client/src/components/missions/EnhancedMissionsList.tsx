import React, { useState, useEffect, useCallback } from 'react';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { AlertCircle, Calendar, CheckCircle, Coins, MessageCircle, UserPlus } from 'lucide-react';
import { useUser } from '@/contexts/userContext';
import { useNotification } from '@/contexts/notificationContext';
import { correctApiRequest } from '@/lib/correctApiRequest';

// –¢–∏–ø –º–∏—Å—Å–∏–∏ –∏–∑ API
interface Mission {
  id: number;
  type: string;
  title: string;
  description: string;
  reward_uni: string;
  is_active: boolean;
}

// –¢–∏–ø –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –º–∏—Å—Å–∏–∏
interface UserMission {
  id: number;
  user_id: number;
  mission_id: number;
  completed_at: string;
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –º–∏—Å—Å–∏–π —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
const EnhancedMissionsList: React.FC = () => {
  const [missions, setMissions] = useState<Mission[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [completedMissionIds, setCompletedMissionIds] = useState<number[]>([]);
  const { userId } = useUser();
  const { showNotification } = useNotification();
  
  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π
  const fetchData = useCallback(async () => {
    try {
      setLoading(true);
      console.log('[EnhancedMissionsList] –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π...');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∏—Å—Å–∏–∏
      const missionsResponse = await correctApiRequest('/api/v2/missions/active', 'GET');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
      if (!missionsResponse || !missionsResponse.success) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∏—Å—Å–∏–π');
      }
      
      const missionsData = missionsResponse.data || [];
      setMissions(missionsData);
      console.log('[EnhancedMissionsList] –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–∏—Å—Å–∏–π:', missionsData.length);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –º–∏—Å—Å–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å userId)
      if (userId) {
        try {
          console.log('[EnhancedMissionsList] –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
          const completedResponse = await correctApiRequest(`/api/v2/missions/user/${userId}`, 'GET');
          
          if (completedResponse && completedResponse.success) {
            const completedData = completedResponse.data || [];
            const completedIds = completedData.map((mission: UserMission) => mission.mission_id);
            setCompletedMissionIds(completedIds);
            console.log('[EnhancedMissionsList] –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π:', completedIds.length);
          } else {
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏—Å—Å–∏–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º
            console.log('[EnhancedMissionsList] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏—Å—Å–∏–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–∏—Ö');
            setCompletedMissionIds([]);
          }
        } catch (userMissionsError) {
          console.error('[EnhancedMissionsList] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π:', userMissionsError);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–π
          setCompletedMissionIds([]);
        }
      }
    } catch (fetchError: any) {
      console.error('[EnhancedMissionsList] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', fetchError);
      setError(fetchError.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∏—Å—Å–∏–∏');
    } finally {
      setLoading(false);
    }
  }, [userId]);
    
  // –ó–∞–≥—Ä—É–∑–∫–∞ –º–∏—Å—Å–∏–π –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    fetchData();
  }, [fetchData]);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏—Å—Å–∏–∏
  const completeMission = async (missionId: number) => {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –º–∏—Å—Å–∏—é –ø–æ ID –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
      const mission = missions.find(m => m.id === missionId);
      const missionTitle = mission?.title || `–ú–∏—Å—Å–∏—è #${missionId}`;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const result = await correctApiRequest('/api/v2/missions/complete', 'POST', {
        user_id: userId || 1,
        mission_id: missionId
      });
      
      if (result && result.success) {
        // –î–æ–±–∞–≤–ª—è–µ–º –º–∏—Å—Å–∏—é –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
        setCompletedMissionIds(prev => [...prev, missionId]);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
        const reward = result.data && result.data.reward 
          ? result.data.reward 
          : (result.reward || 0);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —Å —ç–º–æ–¥–∑–∏
        showNotification('success', {
          message: `‚úÖ ${missionTitle} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –ü–æ–ª—É—á–µ–Ω–æ ${reward} UNI`,
          duration: 4000,
          autoDismiss: true
        });
      } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏
        showNotification('error', {
          message: `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏—Å—Å–∏—é "${missionTitle}": ${result?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
          duration: 5000,
          autoDismiss: true
        });
      }
    } catch (error: any) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞
      showNotification('error', {
        message: `üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏—Å—Å–∏–∏: ${error.message || '–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º'}`,
        duration: 5000,
        autoDismiss: true
      });
      console.error('[EnhancedMissionsList] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏—Å—Å–∏–∏:', error);
    }
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –º–∏—Å—Å–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
  const getMissionIcon = (type: string) => {
    switch (type.toLowerCase()) {
      case 'social':
        return <MessageCircle className="h-5 w-5 text-blue-500" />;
      case 'referral':
        return <UserPlus className="h-5 w-5 text-green-500" />;
      case 'daily':
        return <Calendar className="h-5 w-5 text-orange-500" />;
      case 'achievement':
        return <CheckCircle className="h-5 w-5 text-purple-500" />;
      default:
        return <Coins className="h-5 w-5 text-yellow-500" />;
    }
  };
  
  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  if (loading) {
    return (
      <div className="space-y-4">
        <h2 className="text-xl font-semibold mb-4">üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</h2>
        <div className="grid gap-4">
          {[1, 2, 3].map((i) => (
            <Card key={i} className="animate-pulse">
              <CardHeader>
                <div className="h-4 bg-gray-300 rounded w-3/4"></div>
                <div className="h-3 bg-gray-200 rounded w-1/2"></div>
              </CardHeader>
              <CardContent>
                <div className="h-3 bg-gray-200 rounded w-full mb-2"></div>
                <div className="h-3 bg-gray-200 rounded w-2/3"></div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    );
  }
  
  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
  if (error) {
    return (
      <div className="space-y-4">
        <h2 className="text-xl font-semibold mb-4">üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</h2>
        <Card className="border-red-200">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <AlertCircle className="h-5 w-5 text-red-500" />
              –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-muted-foreground">
              –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}
            </p>
            <Button 
              className="mt-4 w-full"
              onClick={() => {
                setError(null);
                fetchData();
              }}
            >
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }
  
  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
  if (!missions || missions.length === 0) {
    return (
      <div className="space-y-4">
        <h2 className="text-xl font-semibold mb-4">üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</h2>
        <Card>
          <CardHeader>
            <CardTitle>–ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-muted-foreground">
              –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.
            </p>
            <Button 
              className="mt-4 w-full"
              onClick={() => {
                setError(null);
                fetchData();
              }}
            >
              –û–±–Ω–æ–≤–∏—Ç—å
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }
  
  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∏—Å—Å–∏–π
  return (
    <div className="space-y-4">
      <h2 className="text-xl font-semibold mb-4">üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</h2>
      <div className="grid gap-4">
        {missions.map((mission) => {
          const isCompleted = completedMissionIds.includes(mission.id);
          
          return (
            <Card key={mission.id} className={`transition-all duration-200 ${
              isCompleted 
                ? 'bg-green-50 border-green-200 opacity-75' 
                : 'hover:shadow-md border-gray-200'
            }`}>
              <CardHeader className="pb-3">
                <CardTitle className="flex items-center justify-between text-base">
                  <div className="flex items-center gap-2">
                    {getMissionIcon(mission.type)}
                    <span className={isCompleted ? 'line-through text-gray-500' : ''}>
                      {mission.title}
                    </span>
                  </div>
                  <Badge variant={isCompleted ? 'secondary' : 'default'}>
                    {isCompleted ? '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ' : `+${mission.reward_uni} UNI`}
                  </Badge>
                </CardTitle>
                <CardDescription className="text-sm">
                  {mission.description}
                </CardDescription>
              </CardHeader>
              
              {!isCompleted && (
                <CardFooter className="pt-0">
                  <Button 
                    onClick={() => completeMission(mission.id)}
                    className="w-full"
                    size="sm"
                  >
                    <Coins className="h-4 w-4 mr-2" />
                    –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
                  </Button>
                </CardFooter>
              )}
            </Card>
          );
        })}
      </div>
      
      {missions.length > 0 && (
        <div className="text-center text-sm text-muted-foreground pt-4">
          –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {completedMissionIds.length} –∏–∑ {missions.length}
        </div>
      )}
    </div>
  );
};

export default EnhancedMissionsList;