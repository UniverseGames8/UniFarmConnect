import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –∫ —Ç–µ–∫—Å—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
const enhanceToastText = (text: string | React.ReactNode): React.ReactNode => {
  if (typeof text !== 'string') return text;
  
  // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç–µ
  const hasEmoji = (str: string) => {
    const emojiRanges = [
      0x1F600, 0x1F64F, // Emoticons
      0x1F300, 0x1F5FF, // Misc Symbols & Pictographs
      0x1F680, 0x1F6FF, // Transport & Map
      0x2600, 0x26FF,   // Misc symbols
      0x2700, 0x27BF,   // Dingbats
      0xFE00, 0xFE0F,   // Variation Selectors
      0x1F900, 0x1F9FF, // Supplemental Symbols and Pictographs
      0x1F1E6, 0x1F1FF  // Flags
    ];
    
    for (let i = 0; i < str.length; i++) {
      const code = str.codePointAt(i);
      if (!code) continue;
      
      for (let j = 0; j < emojiRanges.length; j += 2) {
        if (code >= emojiRanges[j] && code <= emojiRanges[j + 1]) {
          return true;
        }
      }
    }
    return false;
  };

  // –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ —É–∂–µ –µ—Å—Ç—å —ç–º–æ–¥–∑–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  if (hasEmoji(text)) {
    return text;
  }

  // –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
  let enhancedText = text;
  
  if (text.includes('UNI') || text.includes('–º–æ–Ω–µ—Ç')) {
    enhancedText = text.replace(/([\d.,]+)\s*UNI/g, '$1 UNI üí∞');
  } else if (text.includes('TON')) {
    enhancedText = text.replace(/([\d.,]+)\s*TON/g, '$1 TON üíé');
  } else if (text.includes('–∫–æ—à–µ–ª—ë–∫') || text.includes('–∫–æ—à–µ–ª–µ–∫')) {
    enhancedText = text.replace(/(–∫–æ—à–µ–ª—ë–∫|–∫–æ—à–µ–ª–µ–∫)/g, '$1 üëõ');
  } else if (text.includes('–±–æ–Ω—É—Å') || text.includes('–Ω–∞–≥—Ä–∞–¥–∞')) {
    enhancedText = enhancedText + ' üéÅ';
  } else if (text.includes('–º–∏—Å—Å–∏—è') || text.includes('–∑–∞–¥–∞–Ω–∏–µ')) {
    enhancedText = enhancedText + ' ‚úÖ';
  } else if (text.includes('—É—Å–ø–µ—à–Ω–æ') || text.includes('–≤—ã–ø–æ–ª–Ω–µ–Ω–æ')) {
    enhancedText = enhancedText + ' üéâ';
  } else if (text.includes('–æ—à–∏–±–∫–∞') || text.includes('–Ω–µ —É–¥–∞–ª–æ—Å—å')) {
    enhancedText = '‚ùå ' + enhancedText;
  } else if (text.includes('–≤–Ω–∏–º–∞–Ω–∏–µ') || text.includes('–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ')) {
    enhancedText = '‚ö†Ô∏è ' + enhancedText;
  }
  
  return enhancedText;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
const getEmojiForTitle = (title: string | React.ReactNode): string => {
  if (typeof title !== 'string') return '';
  
  const lowerTitle = title.toLowerCase();
  
  if (lowerTitle.includes('—É—Å–ø–µ—Ö') || lowerTitle.includes('–≥–æ—Ç–æ–≤–æ')) {
    return 'üéâ ';
  } else if (lowerTitle.includes('–æ—à–∏–±–∫–∞')) {
    return '‚ùå ';
  } else if (lowerTitle.includes('–≤–Ω–∏–º–∞–Ω–∏–µ') || lowerTitle.includes('–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ')) {
    return '‚ö†Ô∏è ';
  } else if (lowerTitle.includes('–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è') || lowerTitle.includes('–∑–∞–º–µ—Ç–∫–∞')) {
    return 'üí° ';
  } else if (lowerTitle.includes('–∑–∞–≥—Ä—É–∑–∫–∞') || lowerTitle.includes('–æ–∂–∏–¥–∞–Ω–∏–µ')) {
    return '‚è≥ ';
  } else if (lowerTitle.includes('–±–æ–Ω—É—Å') || lowerTitle.includes('–Ω–∞–≥—Ä–∞–¥–∞')) {
    return 'üéÅ ';
  } else if (lowerTitle.includes('–º–∏—Å—Å–∏—è') || lowerTitle.includes('–∑–∞–¥–∞–Ω–∏–µ')) {
    return 'üìù ';
  } else if (lowerTitle.includes('—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è') || lowerTitle.includes('–ø–µ—Ä–µ–≤–æ–¥')) {
    return 'üí≥ ';
  } else if (lowerTitle.includes('uni')) {
    return 'üí∞ ';
  } else if (lowerTitle.includes('ton')) {
    return 'üíé ';
  }
  
  return '';
};

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        const emoji = title ? getEmojiForTitle(title) : '';
        
        return (
          <Toast key={id} {...props} className="border-l-4 border-primary group">
            <div className="grid gap-1">
              {title && (
                <ToastTitle className="font-semibold flex items-center">
                  {emoji && <span className="mr-1">{emoji}</span>}
                  {title}
                </ToastTitle>
              )}
              {description && (
                <ToastDescription className="text-sm opacity-90">
                  {enhanceToastText(description)}
                </ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}
