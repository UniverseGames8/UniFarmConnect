import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';

type ConnectionStatus = 'connected' | 'disconnected' | 'connecting';

interface WebSocketContextType {
  connectionStatus: ConnectionStatus;
  sendMessage: (message: any) => void;
  lastMessage: any;
}

const WebSocketContext = createContext<WebSocketContextType>({
  connectionStatus: 'disconnected',
  sendMessage: () => {},
  lastMessage: null,
});

interface WebSocketProviderProps {
  children: ReactNode;
}

export const WebSocketProvider: React.FC<WebSocketProviderProps> = ({ children }) => {
  const [socket, setSocket] = useState<WebSocket | null>(null);
  const [connectionStatus, setConnectionStatus] = useState<ConnectionStatus>('disconnected');
  const [lastMessage, setLastMessage] = useState<any>(null);
  const [reconnectTimeout, setReconnectTimeout] = useState<number | null>(null);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const createWebSocket = () => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ localStorage –∏–ª–∏ sessionStorage
      let userId = null;
      try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ sessionStorage
        userId = sessionStorage.getItem('user_id');

        // –ï—Å–ª–∏ –Ω–µ—Ç –≤ sessionStorage, –ø—Ä–æ–±—É–µ–º localStorage
        if (!userId) {
          userId = localStorage.getItem('user_id');
        }

        // –ï—Å–ª–∏ –≤—Å—ë –µ—â–µ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏
        if (!userId) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
          const possibleKeys = ['userId', 'currentUserId', 'authUserId'];
          for (const key of possibleKeys) {
            const value = localStorage.getItem(key) || sessionStorage.getItem(key);
            if (value) {
              userId = value;
              break;
            }
          }
        }

        console.log('[WebSocket] Retrieved user_id for connection:', userId ? userId : 'not found');
      } catch (e) {
        console.error('[WebSocket] Error retrieving user_id from storage:', e);
      }

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –¥–ª—è WebSocket —Å —É—á–µ—Ç–æ–º Replit
      // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ò–°–ü–û–õ–¨–ó–£–ï–ú PRODUCTION URL –î–õ–Ø WEBSOCKET
      const FORCED_PRODUCTION_HOST = 'uni-farm-connect-xo-osadchukdmitro2.replit.app';
      const protocol = 'wss:';
      const wsUrl = `${protocol}//${FORCED_PRODUCTION_HOST}/ws${userId ? `?user_id=${userId}` : ''}`;

      console.log('[WebSocket] üöÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ production WebSocket:', wsUrl);

      const newSocket = new WebSocket(wsUrl);
      setSocket(newSocket);
      setConnectionStatus('connecting');

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      newSocket.onopen = (event) => {
        console.log('[WebSocket] Connection established');
        setConnectionStatus('connected');

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏–Ω–≥ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        try {
          newSocket.send(JSON.stringify({ 
            type: 'ping', 
            timestamp: new Date().toISOString() 
          }));
        } catch (error) {
          console.error('[WebSocket] Error sending initial ping:', error);
        }
      };

      newSocket.onmessage = (event) => {
        try {
          const message = JSON.parse(event.data);
          console.log('[WebSocket] Message received:', message);
          setLastMessage(message);

          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –ø–∏–Ω–≥
          if (message.type === 'ping') {
            try {
              newSocket.send(JSON.stringify({ 
                type: 'pong', 
                timestamp: message.timestamp 
              }));
            } catch (error) {
              console.error('[WebSocket] Error sending pong:', error);
            }
          }
        } catch (error) {
          console.error('[WebSocket] Error parsing message:', error);
        }
      };

      newSocket.onclose = (event) => {
        console.log('[WebSocket] Connection closed:', event.code, event.reason);
        setConnectionStatus('disconnected');

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        const randomDelay = 3000 + Math.random() * 1000;
        console.log(`[WebSocket] Reconnecting in ${Math.round(randomDelay)}ms...`);

        const timeout = window.setTimeout(() => {
          createWebSocket();
        }, randomDelay);

        setReconnectTimeout(timeout);
      };

      newSocket.onerror = (event) => {
        console.error('[WebSocket] Error occurred');
        // –ù–µ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–¥–µ—Å—å, —Ç.–∫. onclose —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      };

    } catch (error) {
      console.error('[WebSocket] Error creating connection:', error);
      setConnectionStatus('disconnected');

      // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è
      const timeout = window.setTimeout(() => {
        createWebSocket();
      }, 5000);

      setReconnectTimeout(timeout);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  const sendMessage = (message: any) => {
    if (socket && socket.readyState === WebSocket.OPEN) {
      try {
        socket.send(typeof message === 'string' ? message : JSON.stringify(message));
      } catch (error) {
        console.error('[WebSocket] Error sending message:', error);
      }
    } else {
      console.warn('[WebSocket] Cannot send message: connection not open');
    }
  };

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    createWebSocket();

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –ø–∏–Ω–≥–æ–≤
    const pingInterval = setInterval(() => {
      if (socket && socket.readyState === WebSocket.OPEN) {
        try {
          socket.send(JSON.stringify({ 
            type: 'ping', 
            timestamp: new Date().toISOString() 
          }));
        } catch (error) {
          console.error('[WebSocket] Error sending ping:', error);
        }
      }
    }, 30000); // –ü–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

    return () => {
      // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      if (socket) {
        socket.close();
      }

      if (reconnectTimeout) {
        clearTimeout(reconnectTimeout);
      }

      clearInterval(pingInterval);
    };
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

  return (
    <WebSocketContext.Provider
      value={{
        connectionStatus,
        sendMessage,
        lastMessage,
      }}
    >
      {children}
    </WebSocketContext.Provider>
  );
};

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è WebSocket –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const useWebSocket = () => useContext(WebSocketContext);

export default WebSocketContext;